{"version":3,"sources":["components/tasklist/index.module.css","screens/Main.js","components/text/index.js","core/graphql/task.mutation.js","core/graphql/taskList.query.js","components/button/index.js","components/task/index.js","components/tasklist/index.js","components/board/index.js","core/apollo/createApolloClient.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","tasklistCustom","MainScreen","_ref","children","react_default","a","createElement","Main_StyledWrapper","Main_StyledInnerWrapper","StyledWrapper","props","Object","assign","className","StyledInnerWrapper","BasicText","objectWithoutProperties","text_TextWrapper","TextWrapper","ADD_TASK","gql","_templateObject","DELETE_TASK","_templateObject2","UPDATE_TASK","_templateObject3","GET_TASKLISTS","taskList_query_templateObject","BigButton","TinyButton","Task","id","moveLeft","moveRight","deleteTask","useMutation","task_TaskWrapper","task_TaskContent","components_text","button_TinyButton","onClick","variables","where","update","proxy","_ref2","data","readQuery","query","updatedList","taskLists","map","list","objectSpread","tasks","filter","task","writeData","TaskWrapper","TaskContent","TaskList","title","addTask","tasklist_TaskListWrapper","tasklist_TaskListHeader","button_BigButton","result","window","prompt","taskList","connect","text","createTask","concat","components_task","key","owner","defaultProps","headerColor","TaskListWrapper","styles","TaskListHeader","_ref3","style","backgroundColor","Board","moveTask","_useQuery","useQuery","error","message","handleMoveMutation","newList","taskId","updateTask","cacheData","res","push","index","isFirst","isLast","length","tasklist","client","ApolloClient","cache","InMemoryCache","dataIdFromObject","obj","__typename","defaultDataIdFromObject","uri","App","es","Suspense","fallback","Main","board","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51f5bfe2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasklistCustom\":\"tasklist_tasklistCustom__DTI8U\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nMainScreen.propTypes = {\n  children: PropTypes.node\n};\n\nfunction MainScreen({ children }) {\n  return (\n    <StyledWrapper>\n      <StyledInnerWrapper>{children}</StyledInnerWrapper>\n    </StyledWrapper>\n  );\n}\n\nexport default MainScreen;\n\nconst StyledWrapper = props => (\n  <div className=\"flex flex-column system-sans-serif\" {...props}>\n    {props.children}\n  </div>\n);\n\nconst StyledInnerWrapper = props => (\n  <div className=\"flex flex-column system-sans-serif\" {...props}>\n    {props.children}\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nBasicText.propTypes = {\n  children: PropTypes.node,\n  level: PropTypes.number,\n  role: PropTypes.string,\n  style: PropTypes.object\n};\n\nfunction BasicText({ children, ...props }) {\n  return <TextWrapper {...props}>{children}</TextWrapper>;\n}\n\nexport default BasicText;\n\nconst TextWrapper = props => (\n  <p className=\"f5 measure lh-copy\" {...props}>\n    {props.children}\n  </p>\n);\n","import gql from 'graphql-tag';\n\nexport const ADD_TASK = gql`\n  mutation addTask($data: TaskCreateInput!) {\n    createTask(data: $data) {\n      id\n      text\n      __typename\n      taskList {\n        id\n        __typename\n      }\n    }\n    __typename\n  }\n`;\n\nexport const DELETE_TASK = gql`\n  mutation deleteTask($where: TaskWhereUniqueInput!) {\n    deleteTask(where: $where) {\n      id\n      __typename\n    }\n    __typename\n  }\n`;\n\nexport const UPDATE_TASK = gql`\n  mutation updateTask(\n    $where: TaskWhereUniqueInput!\n    $data: TaskUpdateInput!\n  ) {\n    updateTask(where: $where, data: $data) {\n      id\n      taskList {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const GET_TASKLISTS = gql`\n  {\n    taskLists {\n      id\n      title\n      headerColor\n      __typename\n      tasks {\n        taskList {\n          id\n          title\n          __typename\n        }\n        id\n        text\n        __typename\n      }\n    }\n    __typename\n  }\n`;\n","import React from 'react';\n\nexport const BigButton = props => (\n  <button\n    className=\"input-reset w-100 dim pa2 mb2 tracked\"\n    {...props}\n  >\n    {props.children}\n  </button>\n);\n\nexport const TinyButton = props => (\n  <button\n    className=\"input-reset ba link dim ph2 pv1 dib f6 tracked\"\n    {...props}\n  >\n    {props.children}\n  </button>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Text from '../text';\nimport { useMutation } from 'react-apollo-hooks';\nimport { DELETE_TASK, GET_TASKLISTS } from '../../core/graphql';\nimport { TinyButton } from '../button';\n\nTask.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string,\n  moveLeft: PropTypes.func,\n  moveRight: PropTypes.func\n};\n\nfunction Task({ children, id, moveLeft, moveRight }) {\n  const deleteTask = useMutation(DELETE_TASK);\n\n  function handleDeleteTask() {\n    deleteTask({\n      variables: {\n        where: {\n          id: id\n        }\n      },\n      /* eslint sort-keys: off */\n      /* eslint no-shadow: off */\n      update: (proxy, { data: { deleteTask } }) => {\n        const data = proxy.readQuery({ query: GET_TASKLISTS });\n        const updatedList = data.taskLists.map(list => {\n          return {\n            ...list,\n            tasks: list.tasks.filter(\n              task => task.id !== deleteTask.id\n            )\n          };\n        });\n        proxy.writeData({\n          data: Object.assign({}, data, {\n            taskLists: updatedList\n          }),\n          query: GET_TASKLISTS\n        });\n      }\n    });\n  }\n\n  return (\n    <TaskWrapper>\n      <TaskContent>\n        <Text>{children}</Text>\n      </TaskContent>\n      <TaskContent>\n        {moveLeft && (\n          <TinyButton onClick={() => moveLeft(id)}>\n            &#8592;\n          </TinyButton>\n        )}\n        <TinyButton onClick={handleDeleteTask}>delete</TinyButton>\n        {moveRight && (\n          <TinyButton onClick={() => moveRight(id)}>\n            &#8594;\n          </TinyButton>\n        )}\n      </TaskContent>\n    </TaskWrapper>\n  );\n}\n\nexport default Task;\n\nconst TaskWrapper = props => (\n  <div\n    className=\"flex flex-column  mb3 ba b--light-silver br2\"\n    {...props}\n  >\n    {props.children}\n  </div>\n);\n\nconst TaskContent = props => (\n  <div className=\"flex justify-between mh2 pa2\" {...props}>\n    {props.children}\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from '../task';\nimport styles from './index.module.css';\nimport { BigButton } from '../button';\nimport { useMutation } from 'react-apollo-hooks';\nimport { ADD_TASK, GET_TASKLISTS } from '../../core/graphql';\n\nTaskList.propTypes = {\n  headerColor: PropTypes.string,\n  id: PropTypes.string,\n  moveLeft: PropTypes.func,\n  moveRight: PropTypes.func,\n  tasks: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      text: PropTypes.string\n    })\n  ),\n  title: PropTypes.string\n};\n\nTaskList.defaultProps = {\n  headerColor: '#333'\n};\n\nfunction TaskList({ tasks, title, moveLeft, moveRight, ...props }) {\n  const addTask = useMutation(ADD_TASK);\n\n  function handleAddTask() {\n    const result = window.prompt('Add a new task');\n    if (!result) {\n      return null;\n    }\n    addTask({\n      variables: {\n        data: {\n          taskList: {\n            connect: { id: props.id }\n          },\n          text: result\n        }\n      },\n      /*eslint sort-keys: off */\n      update: (proxy, { data: { createTask } }) => {\n        const data = proxy.readQuery({ query: GET_TASKLISTS });\n        const updatedList = data.taskLists.map(list => {\n          if (list.id === props.id) {\n            return {\n              ...list,\n              tasks: list.tasks.concat(createTask)\n            };\n          }\n          return list;\n        });\n\n        proxy.writeData({\n          data: Object.assign({}, data, {\n            taskLists: updatedList\n          }),\n          query: GET_TASKLISTS\n        });\n      }\n    });\n  }\n\n  return (\n    <TaskListWrapper>\n      <TaskListHeader {...props}>{title}</TaskListHeader>\n      <BigButton onClick={handleAddTask}>Add Task</BigButton>\n      {tasks.map(task => (\n        <Task\n          key={task.id}\n          id={task.id}\n          owner={title}\n          moveLeft={moveLeft}\n          moveRight={moveRight}\n        >\n          {task.text}\n        </Task>\n      ))}\n    </TaskListWrapper>\n  );\n}\n\nexport default TaskList;\n\nconst TaskListWrapper = props => (\n  <div className={styles.tasklistCustom} {...props}>\n    {props.children}\n  </div>\n);\n\nconst TaskListHeader = ({ children, headerColor, ...props }) => (\n  <div\n    className=\"pa2 mb2 tc white\"\n    style={{\n      backgroundColor: headerColor\n    }}\n    {...props}\n  >\n    {children}\n  </div>\n);\n","import React from 'react';\nimport TaskList from '../tasklist';\nimport { useMutation, useQuery } from 'react-apollo-hooks';\nimport { GET_TASKLISTS, UPDATE_TASK } from '../../core/graphql/';\n\nfunction Board() {\n  const moveTask = useMutation(UPDATE_TASK);\n  const { data, error } = useQuery(GET_TASKLISTS);\n\n  if (error) {\n    return `Error! ${error.message}`;\n  }\n\n  const { taskLists } = data;\n\n  const handleMoveMutation = ({ newList }) => taskId => {\n    moveTask({\n      update: (proxy, { data: { updateTask } }) => {\n        const cacheData = proxy.readQuery({\n          query: GET_TASKLISTS\n        });\n        const updatedList = cacheData.taskLists.map(list => {\n          return {\n            ...list,\n            tasks: list.tasks.filter(task => task.id !== taskId)\n          };\n        });\n        const res = Object.assign({}, cacheData, {\n          taskLists: updatedList.map(list => {\n            if (list.id === newList) {\n              list.tasks.push(updateTask);\n            }\n            return list;\n          })\n        });\n        proxy.writeData({\n          data: {\n            res\n          },\n          query: GET_TASKLISTS\n        });\n      },\n      variables: {\n        data: {\n          taskList: {\n            connect: {\n              id: newList\n            }\n          }\n        },\n        where: { id: taskId }\n      }\n    });\n  };\n\n  return (\n    <div className=\"flex w-100\">\n      {taskLists.map((list, index) => {\n        const isFirst = index === 0;\n        const isLast = index === taskLists.length - 1;\n        return (\n          <TaskList\n            key={list.id}\n            title={list.title}\n            {...list}\n            moveLeft={\n              isFirst\n                ? null\n                : handleMoveMutation({\n                    newList: taskLists[index - 1].id\n                  })\n            }\n            moveRight={\n              isLast\n                ? null\n                : handleMoveMutation({\n                    newList: taskLists[index + 1].id\n                  })\n            }\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Board;\n","import ApolloClient from 'apollo-boost';\nimport {\n  InMemoryCache,\n  defaultDataIdFromObject\n} from 'apollo-cache-inmemory';\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache({\n    dataIdFromObject: obj => {\n      switch (obj.__typename) {\n        case 'task':\n          return obj.id;\n        default:\n          return defaultDataIdFromObject(obj);\n      }\n    }\n  }),\n  uri: 'https://us1.prisma.sh/michael-edelman-ba8919/kanban-demo/dev'\n});\n","import React from 'react';\nimport MainScreen from './screens/Main';\nimport Board from './components/board';\nimport { ApolloProvider } from 'react-apollo-hooks';\nimport { client } from './core/apollo/createApolloClient';\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <React.Suspense fallback={<div>loading...</div>}>\n        <MainScreen>\n          <Board />\n        </MainScreen>\n      </React.Suspense>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}